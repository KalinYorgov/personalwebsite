[
  {
    "id": 1,
    "title": "My Cursor Workflow: MCP Servers, Custom Rules & Productivity Tips",
    "date": "May 15, 2023",
    "content": "Cursor has transformed the way I approach coding, and in this blog post, I want to share my personal workflow, the Model Context Protocol (MCP) servers I utilize, and how I've structured my Cursor rules to boost my productivity and coding efficiency.\n\n### MCP Servers and Where to Get Them\n\nOne of Cursor's strengths lies in its extensibility through MCP servers. I found several incredibly useful MCP servers on [Smithery.ai](https://smithery.ai/). Here's a quick overview of the servers I rely on daily:\n\n- **Brave Search**: Provides powerful web search capabilities directly within Cursor.\n- **Server Sequential Thinking**: Ideal for structured thought processes and step-by-step logic.\n- **Puppeteer**: Useful for automating browser tasks, scraping, and interacting with web pages programmatically.\n- **Firecrawl**: My go-to for powerful scraping capabilities, mapping, and data extraction.\n- **Browser Tabs**: Allows managing browser tabs programmatically, which is excellent for multitasking and efficiency.\n\nHere's a snapshot of my current MCP server setup:\n\n![MCP Server Setup](https://i.postimg.cc/g0QVtJk0/image.png)\n\n### Learning Resources for Cursor\n\nStarting with Cursor can feel daunting, but several resources helped me significantly:\n- [Nick Craux's blog post on Cursor tips](https://www.nickcraux.com/blog/cursor-tips) was an invaluable starting point, full of actionable insights.\n- For structuring my Cursor rules, I closely followed this excellent guide on [Trigger.dev](https://trigger.dev/blog/cursor-rules), coupled with the official [Cursor documentation](https://docs.cursor.com/context/rules-for-ai).\n\n### My Customized Cursor Rules Journey\n\nInitially inspired by [JeredBlu's YouTube tutorial on creating PRDs with Cursor](https://www.youtube.com/watch?v=41xaJsJ8GVc&ab_channel=JeredBlu), I adopted his rule setup for managing my projects more effectively.\n\nLater, I stumbled upon the insightful article [\"AI Blindspots\"](https://ezyang.github.io/ai-blindspots/) by ezyang, which encouraged me to refine my approach further by adding custom rules to tackle specific blind spots and improve the quality of AI-assisted code.\n\n### Access My Complete Cursor Rules\n\nI've compiled all my global rules into a comprehensive document, `coding-best-practices.mdc`, which you can freely access and use as a reference for your own setup. Check it out on my [GitHub repository](https://github.com/KalinYorgov/cursor-notebook/blob/main/coding-best-practices.mdc).\n\n### Adding Project-Specific Rules\n\nWhen starting a new project, I first clarify my tech stack, and then I selectively integrate specific Cursor rules from the extensive and helpful [awesome-cursorrules repository](https://github.com/PatrickJS/awesome-cursorrules?tab=readme-ov-file#contents) maintained by PatrickJS. This targeted approach ensures my rules remain relevant, efficient, and optimized for the task at hand.\n\n### Conclusion\n\nSetting up Cursor effectively has greatly enhanced my coding workflow, improved my efficiency, and elevated the quality of my outputs. I hope sharing my journey helps you find your own powerful workflow. I'd love to hear your own tips and experiences with Cursor!",
    "tags": ["Cursor", "Developer Tools", "Productivity", "AI", "MCP Servers"],
    "imageUrl": "https://i.postimg.cc/g0QVtJk0/image.png"
  }
] 